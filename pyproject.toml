[tool.poetry]
name = "pyvrp"
version = "0.10.0a0"
description = "A state-of-the-art vehicle routing problem solver."
authors = [
    "Niels Wouda <nielswouda@gmail.com>",
    "Leon Lan <leon.lanyidong@gmail.com>",
    "Wouter Kool <wouter.kool@ortec.com>",
]
license = "MIT"
readme = "README.md"
homepage = "https://pyvrp.org/"
repository = "https://github.com/PyVRP/PyVRP"
keywords = [
    "vehicle routing problem",
    "hybrid genetic search",
    "metaheuristic",
]
include = [
    { path = "docs/", format = "sdist" },
    { path = "tests/", format = "sdist" },

    { path = "meson.build", format = "sdist" },
    { path = "meson_options.txt", format = "sdist" },
    { path = "build_extensions.py", format = "sdist" },
    { path = "extract_docstrings.py", format = "sdist" },
    { path = "subprojects/*.wrap", format = "sdist" },

    { path = "pyvrp/**/*.so", format = "wheel" },
    { path = "pyvrp/**/*.pyd", format = "wheel" },
]
exclude = [
    "docs/build",
]
packages = [
    { include = "pyvrp" },
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Development Status :: 5 - Production/Stable",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
]


[tool.poetry.scripts]
pyvrp = "pyvrp.cli:main"


[project]
name = "pyvrp"
version = "0.10.0a0"
description = "A state-of-the-art vehicle routing problem solver."
authors = [
    { name = "Niels Wouda", email = "nielswouda@gmail.com" },
    { name = "Leon Lan", email = "leon.lanyidong@gmail.com" },
    { name = "Wouter Kool", email = "wouter.kool@ortec.com" }
]
license = { file = "LICENSE.md" }
readme = "README.md"
keywords = [
    "vehicle routing problem",
    "hybrid genetic search",
    "metaheuristic",
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Development Status :: 5 - Production/Stable",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.10"
dependencies = [
    "numpy>=1.15.2; python_version < '3.12'",
    "numpy>=1.26.0; python_version >= '3.12'",
    "matplotlib>=2.2.0",
    "vrplib~=1.4",
    "tqdm~=4.64",
    "tomli~=2.0"
]


[project.urls]
Homepage = "https://pyvrp.org/"
Documentation = "https://pyvrp.org/"
Repository = "https://github.com/PyVRP/PyVRP"
Issues = "https://github.com/PyVRP/PyVRP/issues"


[project.scripts]
pyvrp = "pyvrp.cli:main"


[dependency-groups]
dev = [
    "pre-commit~=2.20",
    "pytest>=6.0.0",
    "pytest-cov>=2.6.1",
    "codecov"
]
# These are used in the build script: for compiling the library (meson, ninja)
# and generating docs (docblock) and coverage reports (gcovr).
build = [
    "hatchling>=1.13",
    "editables>=0.5",
    "meson~=1.0",
    "ninja~=1.11",
    "gcovr~=7.2",
    "docblock~=0.1",
]
docs = [
    "sphinx>=7.3.0",
    "nbsphinx>=0.8.9",
    "ipython>=8.6.0",
    "numpydoc>=1.5.0",
    "sphinx-immaterial>=0.11.12"
]
examples = [
    "jupyter>=1.0.0",
    "tabulate~=0.9.0",
]


[tool.uv]
default-groups = ["dev", "build"]
no-build-isolation-package = ["pyvrp"]


[tool.black]
line-length = 79


[tool.ruff]
ignore-init-module-imports = true
line-length = 79
select = [
    "E", "F", "I", "NPY", "PYI", "Q", "RET", "RSE", "RUF", "SLF", "SIM", "TCH"
]


[tool.ruff.isort]
case-sensitive = true
known-first-party = ["pyvrp", "tests"]


[tool.mypy]
ignore_missing_imports = true


[tool.pytest.ini_options]
addopts = "--cov --cov-report=xml --cov-report=term"
testpaths = "tests"


[tool.coverage.run]
omit = [
    "build_extensions.py",  # build entrypoint
    "extract_docstrings.py",  # build script
    "pyvrp/show_versions.py",  # only prints debug information
    "pyvrp/cli.py",  # tested in other ways than unit tests
    "*/tests/*",
    "venv/*",
    "docs/*",
]


[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abstract",
    "if TYPE_CHECKING:",
]


[tool.cibuildwheel]
# We do not support old Python versions and somewhat uncommon platforms. For
# musllinux-based builds we assume users can compile the thing themselves.
build = "cp310-* cp311-* cp312-* cp313-*"
skip = "pp* *_ppc64le *_i686 *_s390x *-win32 *-musllinux*"
build-frontend = "build"
test-requires = "pytest>=6.0.0 pytest-cov>=2.6.1"
test-command = "pytest {package}/tests"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.hatch.build.targets.sdist]
include = [
    "docs/",
    "tests/",
    "meson.build",
    "meson_options.txt",
    "build_extensions.py",
    "extract_docstrings.py",
    "subprojects/*.wrap",
]
exclude = [
    "docs/build",
    "subprojects/*/",
]


[tool.hatch.build.targets.wheel]
artifacts = [
    "pyvrp/**/*.so",
    "pyvrp/**/*.pyd",
]


[tool.hatch.build.targets.wheel.hooks.custom]
path = "build_extensions.py"
